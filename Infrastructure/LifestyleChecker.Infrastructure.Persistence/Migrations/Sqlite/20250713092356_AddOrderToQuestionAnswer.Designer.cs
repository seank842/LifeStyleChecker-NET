// <auto-generated />
using System;
using LifestyleChecker.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LifestyleChecker.Infrastructure.Persistence.Migrations.Sqlite
{
    [DbContext(typeof(LifestyleCheckerDbContext))]
    [Migration("20250713092356_AddOrderToQuestionAnswer")]
    partial class AddOrderToQuestionAnswer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("LifestyleChecker.Domain.Models.AgeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAge")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MinAge", "MaxAge")
                        .IsUnique();

                    b.ToTable("AgeGroups");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionAnswerAndScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AgeGroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswerAndScores");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionnaireResponseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionnaireResponseId");

                    b.ToTable("QuestionResponses");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.Questionnaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionnaireQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AnswerType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireQuestions");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionnaireResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AgeGroupAtTimeOfResponse")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RespondentNHSNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireResponses");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.ScoreEvaluationCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CutOffScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExceedsCriteriaMessage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("OverCutOffMedicalAdvice")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnderOrEqualCriteriaMessage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId")
                        .IsUnique();

                    b.ToTable("ScoreEvaluationCriterias");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionAnswerAndScore", b =>
                {
                    b.HasOne("LifestyleChecker.Domain.Models.AgeGroup", "AgeGroup")
                        .WithMany("QuestionAnswerAndScores")
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LifestyleChecker.Domain.Models.QuestionnaireQuestion", "QuestionnaireQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgeGroup");

                    b.Navigation("QuestionnaireQuestion");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionResponse", b =>
                {
                    b.HasOne("LifestyleChecker.Domain.Models.QuestionnaireQuestion", "QuestionnaireQuestion")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LifestyleChecker.Domain.Models.QuestionnaireResponse", "QuestionnaireResponse")
                        .WithMany("QuestionResponses")
                        .HasForeignKey("QuestionnaireResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionnaireQuestion");

                    b.Navigation("QuestionnaireResponse");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionnaireQuestion", b =>
                {
                    b.HasOne("LifestyleChecker.Domain.Models.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionnaireResponse", b =>
                {
                    b.HasOne("LifestyleChecker.Domain.Models.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnaireResponses")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.ScoreEvaluationCriteria", b =>
                {
                    b.HasOne("LifestyleChecker.Domain.Models.Questionnaire", "Questionnaire")
                        .WithOne("EvaluationCriteria")
                        .HasForeignKey("LifestyleChecker.Domain.Models.ScoreEvaluationCriteria", "QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.AgeGroup", b =>
                {
                    b.Navigation("QuestionAnswerAndScores");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.Questionnaire", b =>
                {
                    b.Navigation("EvaluationCriteria")
                        .IsRequired();

                    b.Navigation("QuestionnaireResponses");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionnaireQuestion", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("LifestyleChecker.Domain.Models.QuestionnaireResponse", b =>
                {
                    b.Navigation("QuestionResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
